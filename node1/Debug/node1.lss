
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e4  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000660  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000023  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  80:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <receive_character>:


uint8_t receive_character()
{
	// Wait for available data
	while (!(UCSR1A & (1 << RXC1)));
  88:	17 9b       	sbis	0x02, 7	; 2
  8a:	fe cf       	rjmp	.-4      	; 0x88 <receive_character>
	return UDR1;
  8c:	83 b1       	in	r24, 0x03	; 3
}
  8e:	08 95       	ret

00000090 <usart_setup>:
#define BAUD 9600
#define BAUDRATE FOSC/16/BAUD-1

void usart_setup()
{
	UBRR1H = (uint8_t)(BAUDRATE >> 8); // Set baud rate
  90:	1c be       	out	0x3c, r1	; 60
	UBRR1L = (uint8_t)BAUDRATE;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 b9       	out	0x00, r24	; 0
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	81 b9       	out	0x01, r24	; 1
	/* Set frame format: 8 bit data, 2 stop bit */
	UCSR1C = (1<<URSEL1)|(1<<USBS1)|(3<<UCSZ01);
  9a:	8c e8       	ldi	r24, 0x8C	; 140
  9c:	8c bf       	out	0x3c, r24	; 60
  9e:	08 95       	ret

000000a0 <send_character>:


void send_character(uint8_t data)
{
	// Wait for available uart to send
	while (!(UCSR1A & (1 << UDRE1)));
  a0:	15 9b       	sbis	0x02, 5	; 2
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <send_character>
	// Send data
	UDR1 = data;
  a4:	83 b9       	out	0x03, r24	; 3
  a6:	08 95       	ret

000000a8 <main>:


int main(void)
{
	/* Replace with your application code */
	usart_setup();
  a8:	0e 94 48 00 	call	0x90	; 0x90 <usart_setup>
	send_character('f');
  ac:	86 e6       	ldi	r24, 0x66	; 102
  ae:	0e 94 50 00 	call	0xa0	; 0xa0 <send_character>
	uint8_t rx_data;
	while (1)
	{
		rx_data = receive_character;
  b2:	84 e4       	ldi	r24, 0x44	; 68
  b4:	90 e0       	ldi	r25, 0x00	; 0
		send_character(rx_data);
  b6:	0e 94 50 00 	call	0xa0	; 0xa0 <send_character>
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xa>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
